{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useState, useEffect } from 'react';\nimport { db } from \"../firebaseConfig\";\nimport { deleteDoc, doc, getDoc, getDocs, collection, setDoc } from 'firebase/firestore';\nimport { DataTable } from 'react-native-paper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar EditStudent = function EditStudent(_ref) {\n  var route = _ref.route;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      userDoc = _useState2[0],\n      setUserDoc = _useState2[1];\n\n  var usersCollectionRef = collection(db, \"Students\");\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      text = _useState4[0],\n      setText = _useState4[1];\n\n  var _fname = \"\";\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      fName = _useState6[0],\n      setFName = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      lName = _useState8[0],\n      setLName = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      dob = _useState10[0],\n      setDob = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      students = _useState12[0],\n      setStudents = _useState12[1];\n\n  var studentid = route.params.paramKey;\n  console.log(\"is this undefined?\" + route.params.paramKey);\n  useEffect(function () {\n    var fetchData = function fetchData() {\n      var response, data;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Firebase.firestore().collection(\"Students\").doc(studentid).get());\n\n            case 3:\n              response = _context.sent;\n              console.log('response', response);\n              data = {\n                title: 'not found'\n              };\n\n              if (response.exists) {\n                data = response.data();\n              }\n\n              setCurrentPost(data);\n              setLoading(false);\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 11]], Promise);\n    };\n\n    fetchData();\n  }, []);\n\n  var Update = function Update(value, merge) {\n    var myDoc = doc(db, \"Students\", studentid);\n    setDoc(myDoc, value, {\n      merge: merge\n    }).then(function () {\n      alert(\"Updated Successfully!\");\n      setText(\"\");\n    }).catch(function (error) {\n      alert(error.message);\n    });\n  };\n\n  var Delete = function Delete() {\n    var myDoc = doc(db, \"Student\", studentid);\n    deleteDoc(myDoc).then(function () {\n      alert(\"Deleted Successfully!\");\n    }).catch(function (error) {\n      alert(error.message);\n    });\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      children: _jsxs(DataTable, {\n        children: [_jsxs(DataTable.Header, {\n          children: [_jsx(DataTable.Title, {\n            children: \"fName\"\n          }), _jsx(DataTable.Title, {\n            children: \"fName\"\n          }), _jsx(DataTable.Title, {\n            children: \"fName\"\n          })]\n        }), _jsxs(DataTable.Row, {\n          children: [students.filter(function (s) {\n            return s.id == studentid;\n          }).forEach(function (stud) {\n            setFName(stud.fName);\n            setLName(stud.lName);\n            setDob(stud.DOB);\n          }), _jsx(DataTable.Cell, {\n            children: _jsx(TextInput, {\n              placeholder: \"Type fname\",\n              onChangeText: function onChangeText(text) {\n                setFName(text);\n              },\n              value: fName\n            })\n          }), _jsx(DataTable.Cell, {\n            children: _jsx(TextInput, {\n              placeholder: \"Type lname\",\n              onChangeText: function onChangeText(text) {\n                setLName(text);\n              },\n              value: lName\n            })\n          }), _jsx(DataTable.Cell, {\n            children: _jsx(TextInput, {\n              placeholder: \"Type dob\",\n              onChangeText: function onChangeText(text) {\n                setDob(text);\n              },\n              value: dob\n            })\n          })]\n        })]\n      })\n    }), _jsx(Button, {\n      title: \"Update User\",\n      onPress: function onPress() {\n        Update({\n          \"fName\": fName,\n          \"lName\": lName,\n          \"DOB\": dob\n        }, true);\n      },\n      disabled: fName == \"\"\n    })]\n  });\n};\n\nexport default EditStudent;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  button: {\n    backgroundColor: '#0782F9',\n    width: '60%',\n    padding: 15,\n    borderRadius: 10,\n    alignItems: 'center',\n    marginTop: 40\n  },\n  buttonOutline: {\n    backgroundColor: 'white',\n    marginTop: 5,\n    borderColor: '#0782F9',\n    borderWidth: 2\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: '700',\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["C:/Users/hsteg/VSCode/ReactNative/assignment2/screens/EditStudent.js"],"names":["useState","useEffect","db","deleteDoc","doc","getDoc","getDocs","collection","setDoc","DataTable","EditStudent","route","userDoc","setUserDoc","usersCollectionRef","text","setText","_fname","fName","setFName","lName","setLName","dob","setDob","students","setStudents","studentid","params","paramKey","console","log","fetchData","Firebase","firestore","get","response","data","title","exists","setCurrentPost","setLoading","error","Update","value","merge","myDoc","then","alert","catch","message","Delete","styles","container","filter","s","id","forEach","stud","DOB","StyleSheet","create","flex","justifyContent","alignItems","button","backgroundColor","width","padding","borderRadius","marginTop","buttonOutline","borderColor","borderWidth","buttonText","color","fontWeight","fontSize"],"mappings":"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","sourcesContent":["import { Button, StyleSheet, Text, TextInput, View, TouchableOpacity } from 'react-native';\r\nimport { useState, useEffect } from 'react';\r\nimport { db } from '../firebaseConfig';\r\nimport { deleteDoc, doc, getDoc, getDocs, collection, setDoc } from 'firebase/firestore';\r\nimport { DataTable } from 'react-native-paper';\r\n//import { Table, TableWrapper, Row, Rows, Col, Cols, Cell } from 'react-native-table-component';\r\n\r\nconst EditStudent = ({route}) => {\r\n    // Storing User Data\r\n  const [userDoc, setUserDoc] = useState(null)\r\n  const usersCollectionRef = collection(db, \"Students\");\r\n  // Update Text\r\n  const [text, setText] = useState(\"\");\r\n  const _fname = \"\";\r\n  const [fName, setFName] = useState(\"\");\r\n  const [lName, setLName] = useState(\"\");\r\n  const [dob, setDob] = useState(\"\");\r\n\r\n  const [students, setStudents] = useState([]);\r\n  const studentid = route.params.paramKey;\r\n  console.log(\"is this undefined?\" + route.params.paramKey);\r\n  \r\n  /*useEffect(() => {\r\n    const getStudents = async () => {\r\n        const data = await getDocs(usersCollectionRef);\r\n        //console.log(data);\r\n        setStudents(data.docs.map((doc)=> ({ ...doc.data(), id: doc.id }))); // now users are added to the db\r\n        // users are added, but not displayed before I push the refresh button (update is next)\r\n        \r\n    }; \r\n    getStudents();\r\n    \r\n    } ,[Object]);*/\r\n\r\n    useEffect(() => {\r\n        \r\n        const fetchData = async() => {\r\n\r\n            try {\r\n\r\n                const response = await Firebase.firestore()\r\n                    .collection(\"Students\")\r\n                    .doc(studentid)\r\n                    .get();\r\n\r\n                console.log('response', response);\r\n\r\n                let data = { title: 'not found' };\r\n\r\n                if (response.exists) {\r\n                    data = response.data();\r\n                }\r\n\r\n                setCurrentPost(data);\r\n                setLoading(false);\r\n\r\n            } catch(err) {\r\n                console.error(err);\r\n            }\r\n\r\n        };\r\n\r\n        fetchData();\r\n        } ,[]);\r\n\r\n  const Update = (value, merge) => {\r\n    // MARK: Updating Doc\r\n    const myDoc = doc(db, \"Students\", studentid);\r\n\r\n    // If you set merge true then it will merge with existing doc otherwise it will be a fresh one\r\n    setDoc(myDoc, value, { merge: merge })\r\n      // Handling Promises\r\n      .then(() => {\r\n        // MARK: Success\r\n        alert(\"Updated Successfully!\")\r\n        setText(\"\")\r\n      })\r\n      .catch((error) => {\r\n        // MARK: Failure\r\n        alert(error.message)\r\n      })\r\n  }\r\n\r\n  const Delete = () => {\r\n    // MARK: Deleting Doc\r\n    const myDoc = doc(db, \"Student\", studentid)\r\n\r\n    deleteDoc(myDoc)\r\n      // Handling Promises\r\n      .then(() => {\r\n        // MARK: Success\r\n        alert(\"Deleted Successfully!\")\r\n      })\r\n      .catch((error) => {\r\n        // MARK: Failure\r\n        alert(error.message)\r\n      })\r\n\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n        \r\n      <View>\r\n\t <DataTable>\r\n\t\t\t\t<DataTable.Header>\r\n\t\t\t\t<DataTable.Title>fName</DataTable.Title>\r\n                <DataTable.Title>fName</DataTable.Title>\r\n                <DataTable.Title>fName</DataTable.Title>\r\n\t\t\t\t</DataTable.Header>\r\n\t<DataTable.Row>\r\n    {students.filter(s => s.id == studentid).forEach(stud => {\r\n        setFName(stud.fName);\r\n        setLName(stud.lName);\r\n        setDob(stud.DOB);\r\n        })}\r\n\t\t\t\t\t<DataTable.Cell>\r\n                        <TextInput placeholder='Type fname' onChangeText={(text) => { setFName(text) }} value={fName}></TextInput>\r\n                    </DataTable.Cell>\r\n                    <DataTable.Cell>\r\n                        <TextInput placeholder='Type lname' onChangeText={(text) => { setLName(text) }} value={lName}></TextInput>\r\n                    </DataTable.Cell>\r\n                    <DataTable.Cell>\r\n                        <TextInput placeholder='Type dob' onChangeText={(text) => { setDob(text) }} value={dob}></TextInput>\r\n                        </DataTable.Cell>\r\n\r\n\t\t\t\t</DataTable.Row>\r\n\r\n\t\t</DataTable>\r\n</View>\r\n\r\n      <Button title='Update User' onPress={() => {\r\n        Update({\r\n          \"fName\": fName,\r\n          \"lName\": lName,\r\n          \"DOB\": dob\r\n        }, true)\r\n      }} disabled={fName == \"\"}></Button>\r\n      \r\n    </View>\r\n  );\r\n}\r\n    export default EditStudent\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      justifyContent: 'center',\r\n      alignItems: 'center'\r\n    },\r\n    button: {\r\n      backgroundColor: '#0782F9',\r\n      width: '60%',\r\n      padding: 15,\r\n      borderRadius: 10,\r\n      alignItems: 'center',\r\n      marginTop: 40,\r\n    },\r\n    buttonOutline: {\r\n        backgroundColor: 'white',\r\n        marginTop: 5,\r\n        borderColor: '#0782F9',\r\n        borderWidth: 2,\r\n    },\r\n    buttonText: {\r\n        color: 'white',\r\n        fontWeight: '700',\r\n        fontSize: 16,\r\n    },\r\n  })"]},"metadata":{},"sourceType":"module"}