{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport React, { useState, useEffect } from 'react';\nimport { auth, db } from \"../firebaseConfig.js\";\nimport { createUserWithEmailAndPassword, onAuthStateChanged, signInWithEmailAndPassword } from 'firebase/auth';\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar LoginScreen = function LoginScreen() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var navigation = useNavigation;\n  useEffect(function () {\n    var unsubscribe = onAuthStateChanged(auth, function (user) {\n      if (user) {\n        navigation.replace(\"Home\");\n      }\n    });\n    return unsubscribe;\n  }, []);\n\n  var handleSignup = function handleSignup() {\n    createUserWithEmailAndPassword(auth, email, password).then(function (userCredential) {\n      var user = userCredential.user;\n      console.log(\"Added user: \", user.email);\n    }).catch(function (error) {\n      return alert(error.message);\n    });\n  };\n\n  var handleLogin = function handleLogin() {\n    signInWithEmailAndPassword(auth, email, password).then(function (userCredential) {\n      var user = userCedential.user;\n      console.log(\"Logged in with: \", user.email);\n    }).catch(function (error) {\n      return alert(error.message);\n    });\n  };\n\n  return _jsxs(KeyboardAvoidingView, {\n    children: [_jsxs(View, {\n      children: [_jsx(TextInput, {\n        placeholder: \"Email\",\n        value: email,\n        onChangeText: function onChangeText(text) {\n          return setEmail(text);\n        },\n        style: styles.input\n      }), _jsx(TextInput, {\n        placeholder: \"Password\",\n        value: password,\n        onChangeText: function onChangeText(text) {\n          return setPassword(text);\n        },\n        style: styles.input,\n        secureTextEntry: true\n      })]\n    }), _jsxs(View, {\n      children: [_jsx(TouchableOpacity, {\n        onPress: handleLogin,\n        style: styles.button,\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: \"Login\"\n        })\n      }), _jsx(TouchableOpacity, {\n        onPress: handleSignup,\n        style: styles.button,\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: \"Register\"\n        })\n      })]\n    })]\n  });\n};\n\nexport default LoginScreen;\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  inputContainer: {\n    width: '80%'\n  },\n  input: {\n    backgroundColor: 'white',\n    paddingHorizontal: 15,\n    paddingVertical: 10,\n    borderRadius: 10,\n    marginTop: 5\n  },\n  buttonContainer: {\n    width: '60%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 40\n  },\n  button: {\n    backgroundColor: '#0782F9',\n    width: '100%',\n    padding: 15,\n    borderRadius: 10,\n    alignItems: 'center'\n  },\n  buttonOutline: {\n    backgroundColor: 'white',\n    marginTop: 5,\n    borderColor: '#0782F9',\n    borderWidth: 2\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: '700',\n    fontSize: 16\n  },\n  buttonOutlineText: {\n    color: '#0782F9',\n    fontWeight: '700',\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["C:/Users/hsteg/VSCode/ReactNative/assignment2/screens/LoginScreen.js"],"names":["React","useState","useEffect","auth","db","createUserWithEmailAndPassword","onAuthStateChanged","signInWithEmailAndPassword","useNavigation","LoginScreen","email","setEmail","password","setPassword","navigation","unsubscribe","user","replace","handleSignup","then","userCredential","console","log","catch","error","alert","message","handleLogin","userCedential","text","styles","input","button","buttonText","StyleSheet","create","container","justifyContent","alignItems","flex","inputContainer","width","backgroundColor","paddingHorizontal","paddingVertical","borderRadius","marginTop","buttonContainer","padding","buttonOutline","borderColor","borderWidth","color","fontWeight","fontSize","buttonOutlineText"],"mappings":"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","sourcesContent":["import { KeyboardAvoidingView, StyleSheet, Text,TextInput, View, TouchableOpacity } from 'react-native'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { auth, db } from \"../firebaseConfig.js\"\r\nimport { createUserWithEmailAndPassword, onAuthStateChanged, signInWithEmailAndPassword } from 'firebase/auth'\r\nimport { useNavigation } from '@react-navigation/native'\r\n\r\nconst LoginScreen = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const navigation = useNavigation;\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, user => {\r\n      if(user){\r\n        navigation.replace(\"Home\");\r\n      }\r\n    })\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const handleSignup = () => {\r\n    createUserWithEmailAndPassword(auth, email, password)\r\n    .then(userCredential => {\r\n      const user = userCredential.user\r\n      console.log(\"Added user: \", user.email)\r\n    })\r\n    .catch(error => alert(error.message))\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    signInWithEmailAndPassword(auth, email, password) \r\n    .then(userCredential => {\r\n      const user = userCedential.user\r\n      console.log(\"Logged in with: \", user.email)\r\n    })\r\n    .catch(error => alert(error.message));\r\n\r\n  }\r\n\r\n  return (\r\n    <KeyboardAvoidingView>\r\n      <View>\r\n        <TextInput \r\n          placeholder=\"Email\"\r\n          value={email}\r\n          onChangeText={text => setEmail(text)}\r\n          style={styles.input}\r\n        />\r\n        <TextInput\r\n          placeholder=\"Password\"\r\n          value={password}\r\n          onChangeText={text => setPassword(text)}\r\n          style={styles.input}\r\n          secureTextEntry\r\n        />\r\n      </View>\r\n      <View>\r\n        <TouchableOpacity\r\n          onPress={handleLogin}\r\n          style={styles.button}>\r\n            <Text style={styles.buttonText}>Login</Text>\r\n        </TouchableOpacity>\r\n        <TouchableOpacity\r\n          onPress={handleSignup}\r\n          style={styles.button}>\r\n            <Text style={styles.buttonText}>Register</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    </KeyboardAvoidingView>\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default LoginScreen\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      flex: 1,\r\n  }, \r\n  inputContainer: {\r\n      width: '80%'\r\n  },\r\n  input: {\r\n      backgroundColor: 'white',\r\n      paddingHorizontal: 15,\r\n      paddingVertical: 10,\r\n      borderRadius: 10,\r\n      marginTop: 5,\r\n  },\r\n  buttonContainer: {\r\n      width: '60%',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      marginTop: 40,\r\n  },\r\n  button: {\r\n      backgroundColor: '#0782F9',\r\n      width: '100%',\r\n      padding: 15,\r\n      borderRadius: 10,\r\n      alignItems: 'center',\r\n  },\r\n  buttonOutline: {\r\n      backgroundColor: 'white',\r\n      marginTop: 5,\r\n      borderColor: '#0782F9',\r\n      borderWidth: 2,\r\n  },\r\n  buttonText: {\r\n      color: 'white',\r\n      fontWeight: '700',\r\n      fontSize: 16,\r\n  },\r\n  buttonOutlineText: {\r\n      color: '#0782F9',\r\n      fontWeight: '700',\r\n      fontSize: 16,\r\n  }\r\n})"]},"metadata":{},"sourceType":"module"}