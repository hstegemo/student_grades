{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useState, useEffect, useRef } from 'react';\nimport { db } from \"../firebaseConfig\";\nimport { deleteDoc, doc, getDoc, getDocs, collection, setDoc } from 'firebase/firestore';\nimport { DataTable } from 'react-native-paper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar EditStudent = function EditStudent(_ref) {\n  var route = _ref.route;\n  var usersCollectionRef = collection(db, \"Students\");\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fName = _useState4[0],\n      setFName = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      lName = _useState6[0],\n      setLName = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dob = _useState8[0],\n      setDob = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      taskItems = _useState10[0],\n      setTaskItems = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      students = _useState12[0],\n      setStudents = _useState12[1];\n\n  var _useState13 = useState(\"\"),\n      _useState14 = _slicedToArray(_useState13, 2),\n      myStudent = _useState14[0],\n      setMyStudent = _useState14[1];\n\n  var studentid = route.params.paramKey;\n  console.log(\"is this undefined?\" + route.params.paramKey);\n  useEffect(function () {\n    var getStudents = function getStudents() {\n      var data, studentRef;\n      return _regeneratorRuntime.async(function getStudents$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(getDocs(usersCollectionRef));\n\n            case 2:\n              data = _context.sent;\n              setStudents(data.docs.map(function (doc) {\n                return _objectSpread(_objectSpread({}, doc.data()), {}, {\n                  id: doc.id\n                });\n              }));\n              studentRef = doc(db, \"Students\", studentid);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getStudents();\n    readStudent();\n  }, []);\n\n  function readStudent() {\n    getDocs(collection(db, \"Students\")).then(function (notesSnapshot) {\n      var notesList = [];\n\n      for (var i = 0; i < notesSnapshot.docs.length; i++) {\n        var _doc = notesSnapshot.docs[i];\n\n        var object = _doc.data();\n\n        object.id = _doc.id;\n        notesList.push(object);\n\n        if (object.id == studentid) {\n          console.log(\"Found \" + object.id);\n          setMyStudent(object);\n          setFName(object.fName);\n        }\n      }\n\n      setTaskItems(notesList);\n    }, function (error) {\n      alert(error);\n    });\n  }\n\n  var Update = function Update(value, merge) {\n    var myDoc = doc(db, \"Students\", studentid);\n    setDoc(myDoc, value, {\n      merge: merge\n    }).then(function () {\n      alert(\"Updated Successfully!\");\n      setText(\"\");\n    }).catch(function (error) {\n      alert(error.message);\n    });\n  };\n\n  var Delete = function Delete() {\n    var myDoc = doc(db, \"Student\", studentid);\n    deleteDoc(myDoc).then(function () {\n      alert(\"Deleted Successfully!\");\n    }).catch(function (error) {\n      alert(error.message);\n    });\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [console.log(myStudent), _jsx(View, {\n      children: _jsxs(DataTable, {\n        children: [_jsxs(DataTable.Header, {\n          children: [_jsx(DataTable.Title, {\n            children: \"fName\"\n          }), _jsx(DataTable.Title, {\n            children: \"fName\"\n          }), _jsx(DataTable.Title, {\n            children: myStudent\n          })]\n        }), _jsxs(DataTable.Row, {\n          children: [_jsx(DataTable.Cell, {\n            children: _jsx(TextInput, {\n              placeholder: \"ral\",\n              onChangeText: function onChangeText(text) {\n                setFName(text);\n              },\n              value: fName\n            })\n          }), _jsx(DataTable.Cell, {\n            children: _jsx(TextInput, {\n              placeholder: \"Type lname\",\n              onChangeText: function onChangeText(text) {\n                setLName(text);\n              },\n              value: lName\n            })\n          }), _jsx(DataTable.Cell, {\n            children: _jsx(TextInput, {\n              placeholder: \"Type dob\",\n              onChangeText: function onChangeText(text) {\n                setDob(text);\n              },\n              value: dob\n            })\n          })]\n        })]\n      })\n    }), _jsx(Button, {\n      title: \"Update User\",\n      onPress: function onPress() {\n        Update({\n          \"fName\": fName,\n          \"lName\": lName,\n          \"DOB\": dob\n        }, true);\n      },\n      disabled: fName == \"\"\n    })]\n  });\n};\n\nexport default EditStudent;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  button: {\n    backgroundColor: '#0782F9',\n    width: '60%',\n    padding: 15,\n    borderRadius: 10,\n    alignItems: 'center',\n    marginTop: 40\n  },\n  buttonOutline: {\n    backgroundColor: 'white',\n    marginTop: 5,\n    borderColor: '#0782F9',\n    borderWidth: 2\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: '700',\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["C:/Users/hsteg/VSCode/ReactNative/assignment2/screens/EditStudent.js"],"names":["useState","useEffect","useRef","db","deleteDoc","doc","getDoc","getDocs","collection","setDoc","DataTable","EditStudent","route","usersCollectionRef","text","setText","fName","setFName","lName","setLName","dob","setDob","taskItems","setTaskItems","students","setStudents","myStudent","setMyStudent","studentid","params","paramKey","console","log","getStudents","data","docs","map","id","studentRef","readStudent","then","notesSnapshot","notesList","i","length","object","push","error","alert","Update","value","merge","myDoc","catch","message","Delete","styles","container","StyleSheet","create","flex","justifyContent","alignItems","button","backgroundColor","width","padding","borderRadius","marginTop","buttonOutline","borderColor","borderWidth","buttonText","color","fontWeight","fontSize"],"mappings":"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","sourcesContent":["import { Button, StyleSheet, Text, TextInput, View, TouchableOpacity } from 'react-native';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { db } from '../firebaseConfig';\r\nimport { deleteDoc, doc, getDoc, getDocs, collection, setDoc } from 'firebase/firestore';\r\nimport { DataTable } from 'react-native-paper';\r\n//import { Table, TableWrapper, Row, Rows, Col, Cols, Cell } from 'react-native-table-component';\r\n\r\nconst EditStudent = ({route}) => {\r\n    // Storing User Data\r\n  const usersCollectionRef = collection(db, \"Students\");\r\n  // Update Text\r\n  const [text, setText] = useState(\"\");\r\n  const [fName, setFName] = useState(\"\");\r\n  const [lName, setLName] = useState(\"\");\r\n  const [dob, setDob] = useState(\"\");\r\n\r\n  const [taskItems, setTaskItems] = useState([]);\r\n\r\n  const [students, setStudents] = useState([]);\r\n  const [myStudent, setMyStudent]= useState(\"\");\r\n  const studentid = route.params.paramKey;\r\n  console.log(\"is this undefined?\" + route.params.paramKey);\r\n\r\n \r\n  useEffect(() => {\r\n    const getStudents = async () => {\r\n        const data = await getDocs(usersCollectionRef);\r\n        //console.log(data);\r\n        setStudents(data.docs.map((doc)=> ({ ...doc.data(), id: doc.id }))); // now users are added to the db\r\n        // users are added, but not displayed before I push the refresh button (update is next)\r\n\r\n        const studentRef = doc(db, \"Students\", studentid);        \r\n    }; \r\n    \r\n    getStudents();\r\n    readStudent();\r\n    \r\n    } ,[]);\r\n\r\n\r\n    /*function readStudent(){\r\n        const docu = doc(db, \"Students\", studentid);\r\n        console.log(\"docu:\");\r\n        console.log(docu);\r\n        const stud = getDoc(docu);\r\n        console.log(stud.data);\r\n        */\r\n        function readStudent(){\r\n        getDocs(collection(db, \"Students\")).then(\r\n            function (notesSnapshot) {\r\n              const notesList = [];\r\n              //alert(JSON.stringify(notesSnapshot.docs[0].data()));\r\n              for (let i = 0; i < notesSnapshot.docs.length; i++) {\r\n                let doc = notesSnapshot.docs[i];\r\n                //alert(JSON.stringify(doc));\r\n      \r\n                let object = doc.data();\r\n                object.id = doc.id;\r\n                //alert(JSON.stringify(object))\r\n                notesList.push(object);\r\n                if(object.id==studentid){\r\n                    console.log(\"Found \" + object.id);   \r\n                    setMyStudent(object);\r\n                    setFName(object.fName);\r\n                }\r\n              }\r\n              //alert(JSON.stringify(notesList));\r\n              setTaskItems(notesList);\r\n            },\r\n            function (error) {\r\n              alert(error);\r\n            }\r\n          );\r\n          \r\n    }\r\n    \r\n\r\n  const Update = (value, merge) => {\r\n    // MARK: Updating Doc\r\n    const myDoc = doc(db, \"Students\", studentid);\r\n\r\n    // If you set merge true then it will merge with existing doc otherwise it will be a fresh one\r\n    setDoc(myDoc, value, { merge: merge })\r\n      // Handling Promises\r\n      .then(() => {\r\n        // MARK: Success\r\n        alert(\"Updated Successfully!\")\r\n        setText(\"\")\r\n      })\r\n      .catch((error) => {\r\n        // MARK: Failure\r\n        alert(error.message)\r\n      })\r\n  }\r\n\r\n  const Delete = () => {\r\n    // MARK: Deleting Doc\r\n    const myDoc = doc(db, \"Student\", studentid)\r\n\r\n    deleteDoc(myDoc)\r\n      // Handling Promises\r\n      .then(() => {\r\n        // MARK: Success\r\n        alert(\"Deleted Successfully!\")\r\n      })\r\n      .catch((error) => {\r\n        // MARK: Failure\r\n        alert(error.message)\r\n      })\r\n\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n        {console.log(myStudent)}\r\n        \r\n      <View>\r\n\t <DataTable>\r\n\t\t\t\t<DataTable.Header>\r\n\t\t\t\t<DataTable.Title>fName</DataTable.Title>\r\n                <DataTable.Title>fName</DataTable.Title>\r\n                <DataTable.Title>{myStudent}</DataTable.Title>\r\n\t\t\t\t</DataTable.Header>\r\n\t<DataTable.Row>\r\n   \r\n\t\t\t\t\t<DataTable.Cell>\r\n                        <TextInput placeholder=\"ral\" onChangeText={(text) => { setFName(text) }} value={fName}></TextInput>\r\n                    </DataTable.Cell>\r\n                    <DataTable.Cell>\r\n                        <TextInput placeholder='Type lname' onChangeText={(text) => { setLName(text) }} value={lName}></TextInput>\r\n                    </DataTable.Cell>\r\n                    <DataTable.Cell>\r\n                        <TextInput placeholder='Type dob' onChangeText={(text) => { setDob(text) }} value={dob}></TextInput>\r\n                        </DataTable.Cell>\r\n\r\n\t\t\t\t</DataTable.Row>\r\n\r\n\t\t</DataTable>\r\n</View>\r\n\r\n      <Button title='Update User' onPress={() => {\r\n        Update({\r\n          \"fName\": fName,\r\n          \"lName\": lName,\r\n          \"DOB\": dob\r\n        }, true)\r\n      }} disabled={fName == \"\"}></Button>\r\n      \r\n    </View>\r\n  );\r\n}\r\n    export default EditStudent\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      justifyContent: 'center',\r\n      alignItems: 'center'\r\n    },\r\n    button: {\r\n      backgroundColor: '#0782F9',\r\n      width: '60%',\r\n      padding: 15,\r\n      borderRadius: 10,\r\n      alignItems: 'center',\r\n      marginTop: 40,\r\n    },\r\n    buttonOutline: {\r\n        backgroundColor: 'white',\r\n        marginTop: 5,\r\n        borderColor: '#0782F9',\r\n        borderWidth: 2,\r\n    },\r\n    buttonText: {\r\n        color: 'white',\r\n        fontWeight: '700',\r\n        fontSize: 16,\r\n    },\r\n  })"]},"metadata":{},"sourceType":"module"}