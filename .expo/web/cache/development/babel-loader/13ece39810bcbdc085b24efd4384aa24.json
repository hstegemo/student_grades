{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useState, useEffect } from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { db } from \"../firebaseConfig\";\nimport { deleteDoc, doc, getDoc, collection, setDoc } from 'firebase/firestore';\nimport { DataTable } from 'react-native-paper';\nimport StudentsScreen from \"./StudentsScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar EditStudent = function EditStudent(studentid) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      userDoc = _useState2[0],\n      setUserDoc = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fName = _useState4[0],\n      setFName = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      lName = _useState6[0],\n      setLName = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dob = _useState8[0],\n      setDOB = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      grades = _useState10[0],\n      setGrades = _useState10[1];\n\n  var studentsRef = collection(db, \"Students\");\n  useEffect(function () {\n    var getStudent = function getStudent() {\n      var data;\n      return _regeneratorRuntime.async(function getStudent$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(doc(\"students\", \"333prceqcFdn0okwkDb9\"));\n\n            case 2:\n              data = _context.sent;\n              getDoc(myDoc).then(function (snapshot) {\n                if (snapshot.exists) {\n                  setUserDoc(snapshot.data());\n                } else {\n                  alert(\"No Doc Found\");\n                }\n              }).catch(function (error) {\n                alert(error.message);\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getStudent();\n  }, []);\n\n  var Read = function Read() {\n    var data = doc(\"students\", \"333prceqcFdn0okwkDb9\");\n    getDoc(myDoc).then(function (snapshot) {\n      if (snapshot.exists) {\n        setUserDoc(snapshot.data());\n      } else {\n        alert(\"No Doc Found\");\n      }\n    }).catch(function (error) {\n      alert(error.message);\n    });\n  };\n\n  var Update = function Update(value, merge) {\n    var myDoc = doc(db, \"MyCollection\", \"MyDocument\");\n    setDoc(myDoc, value, {\n      merge: merge\n    }).then(function () {\n      alert(\"Updated Successfully!\");\n      setText(\"\");\n    }).catch(function (error) {\n      alert(error.message);\n    });\n  };\n\n  var HomeScreenRedir = function HomeScreenRedir() {\n    navigation.replace(\"Home\");\n  };\n\n  return _jsxs(View, {\n    children: [_jsx(TouchableOpacity, {\n      onPress: HomeScreenRedir,\n      style: styles.button,\n      children: _jsx(Text, {\n        styles: styles.buttonText,\n        children: \"HOme\"\n      })\n    }), _jsx(Button, {\n      title: \"Read Doc\",\n      onPress: Read\n    }), userDoc != null && _jsxs(Text, {\n      children: [\"Bio: \", userDoc.bio]\n    })]\n  });\n};\n\nexport default EditStudent;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  button: {\n    backgroundColor: '#0782F9',\n    width: '60%',\n    padding: 15,\n    borderRadius: 10,\n    alignItems: 'center',\n    marginTop: 40\n  },\n  buttonOutline: {\n    backgroundColor: 'white',\n    marginTop: 5,\n    borderColor: '#0782F9',\n    borderWidth: 2\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: '700',\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["C:/Users/hsteg/VSCode/ReactNative/assignment2/screens/EditStudent.js"],"names":["useState","useEffect","useNavigation","createNativeStackNavigator","db","deleteDoc","doc","getDoc","collection","setDoc","DataTable","StudentsScreen","EditStudent","studentid","userDoc","setUserDoc","fName","setFName","lName","setLName","dob","setDOB","grades","setGrades","studentsRef","getStudent","data","myDoc","then","snapshot","exists","alert","catch","error","message","Read","Update","value","merge","setText","HomeScreenRedir","navigation","replace","styles","button","buttonText","bio","StyleSheet","create","container","flex","justifyContent","alignItems","backgroundColor","width","padding","borderRadius","marginTop","buttonOutline","borderColor","borderWidth","color","fontWeight","fontSize"],"mappings":"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","sourcesContent":["import { Button, StyleSheet, Text, TextInput, View, TouchableOpacity } from 'react-native';\r\nimport { useState, useEffect } from 'react';\r\nimport { useNavigation } from '@react-navigation/native'\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack'\r\nimport { db } from '../firebaseConfig';\r\nimport { deleteDoc, doc, getDoc, collection, setDoc } from 'firebase/firestore';\r\n//import { Table, TableWrapper, Row, Rows, Col, Cols, Cell } from 'react-native-table-component';\r\nimport { DataTable } from 'react-native-paper';\r\nimport StudentsScreen from './StudentsScreen';\r\n\r\nconst EditStudent = (studentid) => {\r\n    const [ userDoc, setUserDoc]= useState(null);\r\n\r\n    const [ fName, setFName] = useState(\"\");\r\n    const [ lName, setLName] = useState(\"\");\r\n    const [ dob, setDOB] = useState(\"\");\r\n    const [grades, setGrades]= useState([]);\r\n    const studentsRef = collection(db, \"Students\");\r\n        \r\n    // snapshot:\r\n    // https://youtu.be/LGn6E817XQ4?t=606\r\n    useEffect(() => {\r\n        const getStudent = async () => {\r\n            const data = await doc(\"students\", \"333prceqcFdn0okwkDb9\");\r\n            \r\n            getDoc(myDoc)\r\n            // Handling Promises\r\n            .then((snapshot) => {\r\n              // MARK: Success\r\n              if (snapshot.exists) {\r\n                setUserDoc(snapshot.data())\r\n              }\r\n              else {\r\n                alert(\"No Doc Found\")\r\n              }\r\n            })\r\n            .catch((error) => {\r\n              // MARK: Failure\r\n              alert(error.message)\r\n            })\r\n        }\r\n        getStudent();\r\n    },[])\r\n\r\n    const Read = () => {\r\n        // MARK: Reading Doc\r\n        // You can read what ever document by changing the collection and document path here\r\n        const data = doc(\"students\", \"333prceqcFdn0okwkDb9\");\r\n    \r\n        getDoc(myDoc)\r\n          // Handling Promises\r\n          .then((snapshot) => {\r\n            // MARK: Success\r\n            if (snapshot.exists) {\r\n              setUserDoc(snapshot.data())\r\n            }\r\n            else {\r\n              alert(\"No Doc Found\")\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            // MARK: Failure\r\n            alert(error.message)\r\n          })\r\n    \r\n      }\r\n\r\n    const Update = (value, merge) => {\r\n        // MARK: Updating Doc\r\n        const myDoc = doc(db, \"MyCollection\", \"MyDocument\")\r\n    \r\n        // If you set merge true then it will merge with existing doc otherwise it will be a fresh one\r\n        setDoc(myDoc, value, { merge: merge })\r\n          // Handling Promises\r\n          .then(() => {\r\n            // MARK: Success\r\n            alert(\"Updated Successfully!\")\r\n            setText(\"\")\r\n          })\r\n          .catch((error) => {\r\n            // MARK: Failure\r\n            alert(error.message)\r\n          })\r\n      }\r\n\r\n      const HomeScreenRedir = () => {\r\n        navigation.replace(\"Home\");\r\n    }\r\n\r\n    return (\r\n        <View>\r\n            <TouchableOpacity\r\n                onPress={HomeScreenRedir}\r\n                style={styles.button}>\r\n                <Text styles={styles.buttonText}>HOme</Text>\r\n                \r\n            </TouchableOpacity>\r\n            <Button title='Read Doc' onPress={Read}></Button>\r\n            {\r\n                userDoc != null &&\r\n                <Text>Bio: {userDoc.bio}</Text>\r\n            }\r\n            \r\n        </View>\r\n    );\r\n}\r\n\r\n\r\n    export default EditStudent\r\n        \r\n       /* useEffect(() => {\r\n            const getStudents = async () => {\r\n                const data = await getDocs(usersCollectionRef);\r\n                //console.log(data);\r\n                setStudents(data.docs.map((doc)=> ({ ...doc.data(), id: doc.id }))); // now users are added to the db\r\n                console.log(\"doc.id=\"+doc.id)\r\n                // users are added, but not displayed before I push the refresh button (update is next)\r\n            }; \r\n            \r\n            getStudents();\r\n            } ,[]);\r\n*/\r\n            \r\n         \r\n        \r\n       \r\n\r\n   /* return (\r\n        <View>\r\n            <Text></Text>\r\n        </View>\r\n    );\r\n        \r\n            \r\n        \r\n        <View>\r\n            <TouchableOpacity\r\n                onPress={HomeScreenRedir}\r\n                style={styles.button}>\r\n                <Text styles={styles.buttonText}>Go Home</Text>\r\n            </TouchableOpacity>\r\n            <View>\r\n                        <DataTable>\r\n                            <DataTable.Header>\r\n                            <DataTable.Title>id</DataTable.Title>\r\n                            <DataTable.Title>fName</DataTable.Title>\r\n                            <DataTable.Title>lName</DataTable.Title>\r\n                            <DataTable.Title>DOB</DataTable.Title>\r\n                            </DataTable.Header>\r\n\r\n            {students.filter(student => student.fName == \"Helge\").map((student) => {\r\n            \r\n                 return (\r\n                    <DataTable.Row>\r\n                                    <DataTable.Cell>sdf</DataTable.Cell>\r\n                                    <DataTable.Cell>student.fName</DataTable.Cell>\r\n                                    <DataTable.Cell>student.lName</DataTable.Cell>\r\n                                    <DataTable.Cell>student.DOB</DataTable.Cell>\r\n                                </DataTable.Row>\r\n                    );\r\n                })}\r\n                </DataTable>\r\n                </View>\r\n                \r\n            </View>*/\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      justifyContent: 'center',\r\n      alignItems: 'center'\r\n    },\r\n    button: {\r\n      backgroundColor: '#0782F9',\r\n      width: '60%',\r\n      padding: 15,\r\n      borderRadius: 10,\r\n      alignItems: 'center',\r\n      marginTop: 40,\r\n    },\r\n    buttonOutline: {\r\n        backgroundColor: 'white',\r\n        marginTop: 5,\r\n        borderColor: '#0782F9',\r\n        borderWidth: 2,\r\n    },\r\n    buttonText: {\r\n        color: 'white',\r\n        fontWeight: '700',\r\n        fontSize: 16,\r\n    },\r\n  })"]},"metadata":{},"sourceType":"module"}