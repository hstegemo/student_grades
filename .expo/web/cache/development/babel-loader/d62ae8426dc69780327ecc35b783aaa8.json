{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useState, useEffect } from 'react';\nimport { db } from \"../firebaseConfig\";\nimport { deleteDoc, doc, getDoc, collection, setDoc } from 'firebase/firestore';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar EditStudent = function EditStudent(studentid) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      userDoc = _useState2[0],\n      setUserDoc = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      text = _useState4[0],\n      setText = _useState4[1];\n\n  var Create = function Create() {\n    var myDoc = doc(db, \"Students\", \"MyDocument\");\n    var docData = {\n      \"name\": \"iJustine\",\n      \"bio\": \"YouTuber\"\n    };\n    setDoc(myDoc, docData).then(function () {\n      alert(\"Document Created!\");\n    }).catch(function (error) {\n      alert(error.message);\n    });\n  };\n\n  var Read = function Read() {\n    var myDoc = doc(db, \"Students\", \"333prceqcFdn0okwkDb9\");\n    getDoc(myDoc).then(function (snapshot) {\n      if (snapshot.exists) {\n        setUserDoc(snapshot.data());\n      } else {\n        alert(\"No Doc Found\");\n      }\n    }).catch(function (error) {\n      alert(error.message);\n    });\n  };\n\n  var Update = function Update(value, merge) {\n    var myDoc = doc(db, \"MyCollection\", \"MyDocument\");\n    setDoc(myDoc, value, {\n      merge: merge\n    }).then(function () {\n      alert(\"Updated Successfully!\");\n      setText(\"\");\n    }).catch(function (error) {\n      alert(error.message);\n    });\n  };\n\n  var Delete = function Delete() {\n    var myDoc = doc(db, \"MyCollection\", \"MyDocument\");\n    deleteDoc(myDoc).then(function () {\n      alert(\"Deleted Successfully!\");\n    }).catch(function (error) {\n      alert(error.message);\n    });\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Button, {\n      title: \"Create New Doc\",\n      onPress: Create\n    }), _jsx(Button, {\n      title: \"Read Doc\",\n      onPress: Read\n    }), userDoc != null && _jsxs(Text, {\n      children: [userDoc.fName, \" \", userDoc.lName, \" / \", userDoc.DOB, \": \", userDoc.MGMT329Score || 'ikke deltatt', \" og \", userDoc.MGMT450Score, \", \"]\n    }), _jsx(TextInput, {\n      style: {\n        width: '95%',\n        fontSize: 18,\n        padding: 12,\n        borderColor: 'gray',\n        borderWidth: 0.2,\n        borderRadius: 10,\n        marginVertical: 20\n      },\n      placeholder: \"Type Here\",\n      onChangeText: function onChangeText(text) {\n        setText(text);\n      },\n      value: text\n    }), _jsx(Button, {\n      title: \"Update Doc\",\n      onPress: function onPress() {\n        Update({\n          \"bio\": text\n        }, true);\n      },\n      disabled: text == \"\"\n    }), _jsx(Button, {\n      title: \"Delete Doc\",\n      onPress: Delete\n    })]\n  });\n};\n\nexport default EditStudent;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  button: {\n    backgroundColor: '#0782F9',\n    width: '60%',\n    padding: 15,\n    borderRadius: 10,\n    alignItems: 'center',\n    marginTop: 40\n  },\n  buttonOutline: {\n    backgroundColor: 'white',\n    marginTop: 5,\n    borderColor: '#0782F9',\n    borderWidth: 2\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: '700',\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["C:/Users/hsteg/VSCode/ReactNative/assignment2/screens/EditStudent.js"],"names":["useState","useEffect","db","deleteDoc","doc","getDoc","collection","setDoc","EditStudent","studentid","userDoc","setUserDoc","text","setText","Create","myDoc","docData","then","alert","catch","error","message","Read","snapshot","exists","data","Update","value","merge","Delete","styles","container","fName","lName","DOB","MGMT329Score","MGMT450Score","width","fontSize","padding","borderColor","borderWidth","borderRadius","marginVertical","StyleSheet","create","flex","justifyContent","alignItems","button","backgroundColor","marginTop","buttonOutline","buttonText","color","fontWeight"],"mappings":"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","sourcesContent":["import { Button, StyleSheet, Text, TextInput, View, TouchableOpacity } from 'react-native';\r\nimport { useState, useEffect } from 'react';\r\nimport { db } from '../firebaseConfig';\r\nimport { deleteDoc, doc, getDoc, collection, setDoc } from 'firebase/firestore';\r\n//import { Table, TableWrapper, Row, Rows, Col, Cols, Cell } from 'react-native-table-component';\r\n\r\nconst EditStudent = (studentid) => {\r\n    // Storing User Data\r\n  const [userDoc, setUserDoc] = useState(null)\r\n  // Update Text\r\n  const [text, setText] = useState(\"\")\r\n\r\n  // MARK: CRUD Functions\r\n  const Create = () => {\r\n    // MARK: Creating New Doc in Firebase\r\n    // Before that enable Firebase in Firebase Console\r\n    const myDoc = doc(db, \"Students\", \"MyDocument\")\r\n\r\n    // Your Document Goes Here\r\n    const docData = {\r\n      \"name\": \"iJustine\",\r\n      \"bio\": \"YouTuber\"\r\n    }\r\n\r\n    setDoc(myDoc, docData)\r\n      // Handling Promises\r\n      .then(() => {\r\n        // MARK: Success\r\n        alert(\"Document Created!\")\r\n      })\r\n      .catch((error) => {\r\n        // MARK: Failure\r\n        alert(error.message)\r\n      })\r\n  }\r\n\r\n  const Read = () => {\r\n    // MARK: Reading Doc\r\n    // You can read what ever document by changing the collection and document path here\r\n    const myDoc = doc(db, \"Students\", \"333prceqcFdn0okwkDb9\")\r\n\r\n    getDoc(myDoc)\r\n      // Handling Promises\r\n      .then((snapshot) => {\r\n        // MARK: Success\r\n        if (snapshot.exists) {\r\n          setUserDoc(snapshot.data())\r\n        }\r\n        else {\r\n          alert(\"No Doc Found\")\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        // MARK: Failure\r\n        alert(error.message)\r\n      })\r\n\r\n  }\r\n\r\n  const Update = (value, merge) => {\r\n    // MARK: Updating Doc\r\n    const myDoc = doc(db, \"MyCollection\", \"MyDocument\")\r\n\r\n    // If you set merge true then it will merge with existing doc otherwise it will be a fresh one\r\n    setDoc(myDoc, value, { merge: merge })\r\n      // Handling Promises\r\n      .then(() => {\r\n        // MARK: Success\r\n        alert(\"Updated Successfully!\")\r\n        setText(\"\")\r\n      })\r\n      .catch((error) => {\r\n        // MARK: Failure\r\n        alert(error.message)\r\n      })\r\n  }\r\n\r\n  const Delete = () => {\r\n    // MARK: Deleting Doc\r\n    const myDoc = doc(db, \"MyCollection\", \"MyDocument\")\r\n\r\n    deleteDoc(myDoc)\r\n      // Handling Promises\r\n      .then(() => {\r\n        // MARK: Success\r\n        alert(\"Deleted Successfully!\")\r\n      })\r\n      .catch((error) => {\r\n        // MARK: Failure\r\n        alert(error.message)\r\n      })\r\n\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Button title='Create New Doc' onPress={Create}></Button> \r\n      <Button title='Read Doc' onPress={Read}></Button>\r\n      {\r\n        userDoc != null &&\r\n        <Text>{userDoc.fName} {userDoc.lName} / {userDoc.DOB}: {userDoc.MGMT329Score || 'ikke deltatt'} og {userDoc.MGMT450Score}, </Text>\r\n      }\r\n      <TextInput style={{\r\n        width: '95%',\r\n        fontSize: 18,\r\n        padding: 12,\r\n        borderColor: 'gray',\r\n        borderWidth: 0.2,\r\n        borderRadius: 10,\r\n        marginVertical: 20\r\n      }} placeholder='Type Here' onChangeText={(text) => { setText(text) }} value={text}></TextInput>\r\n\r\n      <Button title='Update Doc' onPress={() => {\r\n        Update({\r\n          \"bio\": text\r\n        }, true)\r\n      }} disabled={text == \"\"}></Button>\r\n      <Button title='Delete Doc' onPress={Delete}></Button>\r\n    </View>\r\n  );\r\n}\r\n\r\n\r\n    export default EditStudent\r\n        \r\n       /* useEffect(() => {\r\n            const getStudents = async () => {\r\n                const data = await getDocs(usersCollectionRef);\r\n                //console.log(data);\r\n                setStudents(data.docs.map((doc)=> ({ ...doc.data(), id: doc.id }))); // now users are added to the db\r\n                console.log(\"doc.id=\"+doc.id)\r\n                // users are added, but not displayed before I push the refresh button (update is next)\r\n            }; \r\n            \r\n            getStudents();\r\n            } ,[]);\r\n*/\r\n            \r\n         \r\n        \r\n       \r\n\r\n   /* return (\r\n        <View>\r\n            <Text></Text>\r\n        </View>\r\n    );\r\n        \r\n            \r\n        \r\n        <View>\r\n            <TouchableOpacity\r\n                onPress={HomeScreenRedir}\r\n                style={styles.button}>\r\n                <Text styles={styles.buttonText}>Go Home</Text>\r\n            </TouchableOpacity>\r\n            <View>\r\n                        <DataTable>\r\n                            <DataTable.Header>\r\n                            <DataTable.Title>id</DataTable.Title>\r\n                            <DataTable.Title>fName</DataTable.Title>\r\n                            <DataTable.Title>lName</DataTable.Title>\r\n                            <DataTable.Title>DOB</DataTable.Title>\r\n                            </DataTable.Header>\r\n\r\n            {students.filter(student => student.fName == \"Helge\").map((student) => {\r\n            \r\n                 return (\r\n                    <DataTable.Row>\r\n                                    <DataTable.Cell>sdf</DataTable.Cell>\r\n                                    <DataTable.Cell>student.fName</DataTable.Cell>\r\n                                    <DataTable.Cell>student.lName</DataTable.Cell>\r\n                                    <DataTable.Cell>student.DOB</DataTable.Cell>\r\n                                </DataTable.Row>\r\n                    );\r\n                })}\r\n                </DataTable>\r\n                </View>\r\n                \r\n            </View>*/\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      justifyContent: 'center',\r\n      alignItems: 'center'\r\n    },\r\n    button: {\r\n      backgroundColor: '#0782F9',\r\n      width: '60%',\r\n      padding: 15,\r\n      borderRadius: 10,\r\n      alignItems: 'center',\r\n      marginTop: 40,\r\n    },\r\n    buttonOutline: {\r\n        backgroundColor: 'white',\r\n        marginTop: 5,\r\n        borderColor: '#0782F9',\r\n        borderWidth: 2,\r\n    },\r\n    buttonText: {\r\n        color: 'white',\r\n        fontWeight: '700',\r\n        fontSize: 16,\r\n    },\r\n  })"]},"metadata":{},"sourceType":"module"}