{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useState, useEffect } from 'react';\nimport { db } from \"../firebaseConfig\";\nimport { deleteDoc, doc, getDoc, collection, setDoc } from 'firebase/firestore';\nimport { DataTable } from 'react-native-paper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar EditStudent = function EditStudent(_ref) {\n  var route = _ref.route;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      userDoc = _useState2[0],\n      setUserDoc = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      text = _useState4[0],\n      setText = _useState4[1];\n\n  var _fname = \"\";\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      fName = _useState6[0],\n      setFName = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      lName = _useState8[0],\n      setLName = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      dob = _useState10[0],\n      setDob = _useState10[1];\n\n  var studentid = route.params.paramKey;\n  console.log(\"is this undefined?\" + route.params.paramKey);\n  useEffect(function () {\n    var Read = function Read() {\n      var myDoc;\n      return _regeneratorRuntime.async(function Read$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(doc(db, \"Students\", studentid));\n\n            case 2:\n              myDoc = _context.sent;\n              getDoc(myDoc).then(function (snapshot) {\n                if (snapshot.exists) {\n                  setUserDoc(snapshot.data());\n                  console.log(userDoc.fName);\n                } else {\n                  alert(\"No Doc Found\");\n                }\n              }).catch(function (error) {\n                alert(error.message);\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    Read();\n  }, []);\n\n  var Update = function Update(value, merge) {\n    var myDoc = doc(db, \"Students\", studentid);\n    setDoc(myDoc, value, {\n      merge: merge\n    }).then(function () {\n      alert(\"Updated Successfully!\");\n      setText(\"\");\n    }).catch(function (error) {\n      alert(error.message);\n    });\n  };\n\n  var Delete = function Delete() {\n    var myDoc = doc(db, \"Student\", studentid);\n    deleteDoc(myDoc).then(function () {\n      alert(\"Deleted Successfully!\");\n    }).catch(function (error) {\n      alert(error.message);\n    });\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      children: _jsxs(DataTable, {\n        children: [_jsxs(DataTable.Header, {\n          children: [_jsx(DataTable.Title, {\n            children: \"fName\"\n          }), _jsx(DataTable.Title, {\n            children: \"fName\"\n          }), _jsx(DataTable.Title, {\n            children: \"fName\"\n          })]\n        }), _jsxs(DataTable.Row, {\n          children: [_jsx(DataTable.Cell, {\n            children: _jsx(TextInput, {\n              placeholder: \"Type fname\",\n              onChangeText: function onChangeText(text) {\n                setFName(text);\n              },\n              value: fName\n            })\n          }), _jsx(DataTable.Cell, {\n            children: _jsx(TextInput, {\n              placeholder: \"Type lname\",\n              onChangeText: function onChangeText(text) {\n                setLName(text);\n              },\n              value: lName\n            })\n          }), _jsx(DataTable.Cell, {\n            children: _jsx(TextInput, {\n              placeholder: \"Type dob\",\n              onChangeText: function onChangeText(text) {\n                setDob(text);\n              },\n              value: dob\n            })\n          })]\n        })]\n      })\n    }), _jsx(Button, {\n      title: \"Update User\",\n      onPress: function onPress() {\n        Update({\n          \"fName\": fName,\n          \"lName\": lName,\n          \"DOB\": dob\n        }, true);\n      },\n      disabled: fName == \"\"\n    })]\n  });\n};\n\nexport default EditStudent;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  button: {\n    backgroundColor: '#0782F9',\n    width: '60%',\n    padding: 15,\n    borderRadius: 10,\n    alignItems: 'center',\n    marginTop: 40\n  },\n  buttonOutline: {\n    backgroundColor: 'white',\n    marginTop: 5,\n    borderColor: '#0782F9',\n    borderWidth: 2\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: '700',\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["C:/Users/hsteg/VSCode/ReactNative/assignment2/screens/EditStudent.js"],"names":["useState","useEffect","db","deleteDoc","doc","getDoc","collection","setDoc","DataTable","EditStudent","route","userDoc","setUserDoc","text","setText","_fname","fName","setFName","lName","setLName","dob","setDob","studentid","params","paramKey","console","log","Read","myDoc","then","snapshot","exists","data","alert","catch","error","message","Update","value","merge","Delete","styles","container","StyleSheet","create","flex","justifyContent","alignItems","button","backgroundColor","width","padding","borderRadius","marginTop","buttonOutline","borderColor","borderWidth","buttonText","color","fontWeight","fontSize"],"mappings":"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","sourcesContent":["import { Button, StyleSheet, Text, TextInput, View, TouchableOpacity } from 'react-native';\r\nimport { useState, useEffect } from 'react';\r\nimport { db } from '../firebaseConfig';\r\nimport { deleteDoc, doc, getDoc, collection, setDoc } from 'firebase/firestore';\r\nimport { DataTable } from 'react-native-paper';\r\n//import { Table, TableWrapper, Row, Rows, Col, Cols, Cell } from 'react-native-table-component';\r\n\r\nconst EditStudent = ({route}) => {\r\n    // Storing User Data\r\n  const [userDoc, setUserDoc] = useState(null)\r\n  // Update Text\r\n  const [text, setText] = useState(\"\");\r\n  const _fname = \"\";\r\n  const [fName, setFName] = useState(\"\");\r\n  const [lName, setLName] = useState(\"\");\r\n  const [dob, setDob] = useState(\"\");\r\n  const studentid = route.params.paramKey;\r\n  console.log(\"is this undefined?\" + route.params.paramKey);\r\n\r\n  // MARK: CRUD Functions\r\n  /*const Create = () => {\r\n    // MARK: Creating New Doc in Firebase\r\n    // Before that enable Firebase in Firebase Console\r\n    const myDoc = doc(db, \"Students\", \"MyDocument\")\r\n\r\n    // Your Document Goes Here\r\n    const docData = {\r\n      \"name\": \"iJustine\",\r\n      \"bio\": \"YouTuber\"\r\n    }\r\n\r\n    setDoc(myDoc, docData)\r\n      // Handling Promises\r\n      .then(() => {\r\n        // MARK: Success\r\n        alert(\"Document Created!\")\r\n      })\r\n      .catch((error) => {\r\n        // MARK: Failure\r\n        alert(error.message)\r\n      })\r\n  }*/\r\n\r\n  useEffect(() => {\r\n    const Read = async () => {\r\n        // MARK: Reading Doc\r\n        // You can read what ever document by changing the collection and document path here\r\n        const myDoc = await doc(db, \"Students\", studentid)\r\n    \r\n        getDoc(myDoc)\r\n          // Handling Promises\r\n          .then((snapshot) => {\r\n            // MARK: Success\r\n            if (snapshot.exists) {\r\n              setUserDoc(snapshot.data());\r\n              console.log(userDoc.fName);\r\n            }\r\n            else {\r\n              alert(\"No Doc Found\")\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            // MARK: Failure\r\n            alert(error.message)\r\n          })\r\n      }\r\n    \r\n    Read();\r\n    } ,[]);\r\n\r\n  /*const Read = () => {\r\n    // MARK: Reading Doc\r\n    // You can read what ever document by changing the collection and document path here\r\n    const myDoc = doc(db, \"Students\", studentid)\r\n\r\n    getDoc(myDoc)\r\n      // Handling Promises\r\n      .then((snapshot) => {\r\n        // MARK: Success\r\n        if (snapshot.exists) {\r\n          setUserDoc(snapshot.data())\r\n        }\r\n        else {\r\n          alert(\"No Doc Found\")\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        // MARK: Failure\r\n        alert(error.message)\r\n      })\r\n  }*/\r\n\r\n  const Update = (value, merge) => {\r\n    // MARK: Updating Doc\r\n    const myDoc = doc(db, \"Students\", studentid);\r\n\r\n    // If you set merge true then it will merge with existing doc otherwise it will be a fresh one\r\n    setDoc(myDoc, value, { merge: merge })\r\n      // Handling Promises\r\n      .then(() => {\r\n        // MARK: Success\r\n        alert(\"Updated Successfully!\")\r\n        setText(\"\")\r\n      })\r\n      .catch((error) => {\r\n        // MARK: Failure\r\n        alert(error.message)\r\n      })\r\n  }\r\n\r\n  const Delete = () => {\r\n    // MARK: Deleting Doc\r\n    const myDoc = doc(db, \"Student\", studentid)\r\n\r\n    deleteDoc(myDoc)\r\n      // Handling Promises\r\n      .then(() => {\r\n        // MARK: Success\r\n        alert(\"Deleted Successfully!\")\r\n      })\r\n      .catch((error) => {\r\n        // MARK: Failure\r\n        alert(error.message)\r\n      })\r\n\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      \r\n      <View>\r\n\t <DataTable>\r\n\t\t\t\t<DataTable.Header>\r\n\t\t\t\t<DataTable.Title>fName</DataTable.Title>\r\n                <DataTable.Title>fName</DataTable.Title>\r\n                <DataTable.Title>fName</DataTable.Title>\r\n\t\t\t\t</DataTable.Header>\r\n\t<DataTable.Row>\r\n        \r\n\t\t\t\t\t<DataTable.Cell>\r\n                        <TextInput placeholder='Type fname' onChangeText={(text) => { setFName(text) }} value={fName}></TextInput>\r\n                    </DataTable.Cell>\r\n                    <DataTable.Cell>\r\n                        <TextInput placeholder='Type lname' onChangeText={(text) => { setLName(text) }} value={lName}></TextInput>\r\n                    </DataTable.Cell>\r\n                    <DataTable.Cell>\r\n                        <TextInput placeholder='Type dob' onChangeText={(text) => { setDob(text) }} value={dob}></TextInput>\r\n                        </DataTable.Cell>\r\n\t\t\t\t</DataTable.Row>\r\n\r\n\t\t</DataTable>\r\n</View>\r\n\r\n      <Button title='Update User' onPress={() => {\r\n        Update({\r\n          \"fName\": fName,\r\n          \"lName\": lName,\r\n          \"DOB\": dob\r\n        }, true)\r\n      }} disabled={fName == \"\"}></Button>\r\n      \r\n    </View>\r\n  );\r\n}\r\n\r\n\r\n    export default EditStudent\r\n        \r\n       /* useEffect(() => {\r\n            const getStudents = async () => {\r\n                const data = await getDocs(usersCollectionRef);\r\n                //console.log(data);\r\n                setStudents(data.docs.map((doc)=> ({ ...doc.data(), id: doc.id }))); // now users are added to the db\r\n                console.log(\"doc.id=\"+doc.id)\r\n                // users are added, but not displayed before I push the refresh button (update is next)\r\n            }; \r\n            \r\n            getStudents();\r\n            } ,[]);\r\n*/\r\n            \r\n         \r\n        \r\n       \r\n\r\n   /* return (\r\n        <View>\r\n            <Text></Text>\r\n        </View>\r\n    );\r\n        \r\n            \r\n        \r\n        <View>\r\n            <TouchableOpacity\r\n                onPress={HomeScreenRedir}\r\n                style={styles.button}>\r\n                <Text styles={styles.buttonText}>Go Home</Text>\r\n            </TouchableOpacity>\r\n            <View>\r\n                        <DataTable>\r\n                            <DataTable.Header>\r\n                            <DataTable.Title>id</DataTable.Title>\r\n                            <DataTable.Title>fName</DataTable.Title>\r\n                            <DataTable.Title>lName</DataTable.Title>\r\n                            <DataTable.Title>DOB</DataTable.Title>\r\n                            </DataTable.Header>\r\n\r\n            {students.filter(student => student.fName == \"Helge\").map((student) => {\r\n            \r\n                 return (\r\n                    <DataTable.Row>\r\n                                    <DataTable.Cell>sdf</DataTable.Cell>\r\n                                    <DataTable.Cell>student.fName</DataTable.Cell>\r\n                                    <DataTable.Cell>student.lName</DataTable.Cell>\r\n                                    <DataTable.Cell>student.DOB</DataTable.Cell>\r\n                                </DataTable.Row>\r\n                    );\r\n                })}\r\n                </DataTable>\r\n                </View>\r\n                \r\n            </View>*/\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      justifyContent: 'center',\r\n      alignItems: 'center'\r\n    },\r\n    button: {\r\n      backgroundColor: '#0782F9',\r\n      width: '60%',\r\n      padding: 15,\r\n      borderRadius: 10,\r\n      alignItems: 'center',\r\n      marginTop: 40,\r\n    },\r\n    buttonOutline: {\r\n        backgroundColor: 'white',\r\n        marginTop: 5,\r\n        borderColor: '#0782F9',\r\n        borderWidth: 2,\r\n    },\r\n    buttonText: {\r\n        color: 'white',\r\n        fontWeight: '700',\r\n        fontSize: 16,\r\n    },\r\n  })"]},"metadata":{},"sourceType":"module"}