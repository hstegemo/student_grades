{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useState } from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { db } from \"../firebaseConfig\";\nimport { deleteDoc, doc, getDoc, setDoc } from 'firebase/firestore';\nimport { DataTable } from 'react-native-paper';\nimport StudentsScreen from \"./StudentsScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar EditStudent = function EditStudent(studentid) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      students = _useState2[0],\n      setStudents = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fName = _useState4[0],\n      setFName = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      lName = _useState6[0],\n      setLName = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dob = _useState8[0],\n      setDOB = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      grades = _useState10[0],\n      setGrades = _useState10[1];\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      userDoc = _useState12[0],\n      setUserDoc = _useState12[1];\n\n  var studentsRef = collection(db, \"Students\");\n  var navigation = useNavigation();\n\n  var HomeScreenRedir = function HomeScreenRedir() {\n    navigation.replace(\"Home\");\n  };\n\n  var myIDS = [];\n  useEffect(function () {\n    var getStudents = function getStudents() {\n      var data;\n      return _regeneratorRuntime.async(function getStudents$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(getDocs(studentsRef));\n\n            case 2:\n              data = _context.sent;\n              data.forEach(function (student) {\n                console.log(student.id);\n                myIDS.push(student.id);\n              });\n              setStudents(data.docs.map(function (doc) {\n                return _objectSpread(_objectSpread({}, doc.data()), {}, {\n                  id: doc.id\n                });\n              }));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getStudents();\n  }, []);\n\n  var Update = function Update(value, merge) {\n    var myDoc = doc(db, \"MyCollection\", \"MyDocument\");\n    setDoc(myDoc, value, {\n      merge: merge\n    }).then(function () {\n      alert(\"Updated Successfully!\");\n      setText(\"\");\n    }).catch(function (error) {\n      alert(error.message);\n    });\n  };\n\n  return _jsxs(View, {\n    children: [_jsxs(TouchableOpacity, {\n      onPress: HomeScreenRedir,\n      style: styles.button,\n      children: [_jsx(Text, {\n        styles: styles.buttonText,\n        children: \"HOme\"\n      }), myIDS.forEach(function (stu) {\n        _jsx(Text, {\n          children: stu\n        });\n      })]\n    }), _jsxs(View, {\n      children: [_jsxs(DataTable, {\n        children: [_jsxs(DataTable.Header, {\n          children: [_jsx(DataTable.Title, {\n            children: \"fName\"\n          }), _jsx(DataTable.Title, {\n            children: \"lName\"\n          }), _jsx(DataTable.Title, {\n            children: \"DOB\"\n          })]\n        }), students.map(function (student) {\n          return _jsxs(DataTable.Row, {\n            children: [_jsxs(DataTable.Cell, {\n              children: [_jsx(TextInput, {\n                placeholder: \"Type Here\",\n                onChangeText: function onChangeText(text) {\n                  setFName(text);\n                },\n                value: text\n              }), student.fName]\n            }), _jsxs(DataTable.Cell, {\n              children: [_jsx(TextInput, {\n                placeholder: \"Type Here\",\n                onChangeText: function onChangeText(text) {\n                  setLName(text);\n                },\n                value: text\n              }), student.fName]\n            }), _jsxs(DataTable.Cell, {\n              children: [_jsx(TextInput, {\n                placeholder: \"Type Here\",\n                onChangeText: function onChangeText(text) {\n                  setDOB(text);\n                },\n                value: text\n              }), student.fName]\n            })]\n          });\n        })]\n      }), _jsx(\"button\", {\n        title: \"Edit Studnet\",\n        onPress: function onPress() {}\n      })]\n    })]\n  });\n};\n\nexport default EditStudent;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  button: {\n    backgroundColor: '#0782F9',\n    width: '60%',\n    padding: 15,\n    borderRadius: 10,\n    alignItems: 'center',\n    marginTop: 40\n  },\n  buttonOutline: {\n    backgroundColor: 'white',\n    marginTop: 5,\n    borderColor: '#0782F9',\n    borderWidth: 2\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: '700',\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["C:/Users/hsteg/VSCode/ReactNative/assignment2/screens/EditStudent.js"],"names":["useState","useNavigation","createNativeStackNavigator","db","deleteDoc","doc","getDoc","setDoc","DataTable","StudentsScreen","EditStudent","studentid","students","setStudents","fName","setFName","lName","setLName","dob","setDOB","grades","setGrades","userDoc","setUserDoc","studentsRef","collection","navigation","HomeScreenRedir","replace","myIDS","useEffect","getStudents","getDocs","data","forEach","student","console","log","id","push","docs","map","Update","value","merge","myDoc","then","alert","setText","catch","error","message","styles","button","buttonText","stu","text","StyleSheet","create","container","flex","justifyContent","alignItems","backgroundColor","width","padding","borderRadius","marginTop","buttonOutline","borderColor","borderWidth","color","fontWeight","fontSize"],"mappings":"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","sourcesContent":["import { Button, StyleSheet, Text, TextInput, View } from 'react-native';\r\nimport { useState } from 'react';\r\nimport { useNavigation } from '@react-navigation/native'\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack'\r\nimport { db } from '../firebaseConfig';\r\nimport { deleteDoc, doc, getDoc, setDoc } from 'firebase/firestore';\r\n//import { Table, TableWrapper, Row, Rows, Col, Cols, Cell } from 'react-native-table-component';\r\nimport { DataTable } from 'react-native-paper';\r\nimport StudentsScreen from './StudentsScreen';\r\n\r\nconst EditStudent = (studentid) => {\r\n    const [students, setStudents] = useState([]);\r\n    const [ fName, setFName] = useState(\"\");\r\n    const [ lName, setLName] = useState(\"\");\r\n    const [ dob, setDOB] = useState(\"\");\r\n    const [grades, setGrades]= useState([]);\r\n    const [userDoc, setUserDoc] = useState(null)\r\n    const studentsRef = collection(db, \"Students\");\r\n\r\n\r\n    const navigation = useNavigation();\r\n\r\n    const HomeScreenRedir = () => {\r\n        navigation.replace(\"Home\");\r\n    }\r\n    const myIDS = [];\r\n        \r\n    // snapshot:\r\n    // https://youtu.be/LGn6E817XQ4?t=606\r\n    useEffect(() => {\r\n        const getStudents = async () => {\r\n            const data = await getDocs(studentsRef);\r\n            data.forEach((student) => {\r\n                console.log(student.id);  \r\n                myIDS.push(student.id); \r\n            });\r\n            setStudents(data.docs.map((doc)=> ({ ...doc.data(), id: doc.id })));\r\n        }\r\n        getStudents();\r\n    },[])\r\n\r\n    const Update = (value, merge) => {\r\n        // MARK: Updating Doc\r\n        const myDoc = doc(db, \"MyCollection\", \"MyDocument\")\r\n    \r\n        // If you set merge true then it will merge with existing doc otherwise it will be a fresh one\r\n        setDoc(myDoc, value, { merge: merge })\r\n          // Handling Promises\r\n          .then(() => {\r\n            // MARK: Success\r\n            alert(\"Updated Successfully!\")\r\n            setText(\"\")\r\n          })\r\n          .catch((error) => {\r\n            // MARK: Failure\r\n            alert(error.message)\r\n          })\r\n      }\r\n\r\n    return (\r\n        <View>\r\n            <TouchableOpacity\r\n                onPress={HomeScreenRedir}\r\n                style={styles.button}>\r\n                <Text styles={styles.buttonText}>HOme</Text>\r\n                {myIDS.forEach((stu) => {\r\n                    <Text>{stu}</Text>\r\n                })}\r\n            </TouchableOpacity>\r\n            <View>\r\n                        <DataTable>\r\n                            <DataTable.Header>\r\n                            <DataTable.Title>fName</DataTable.Title>\r\n                            <DataTable.Title>lName</DataTable.Title>\r\n                            <DataTable.Title>DOB</DataTable.Title>\r\n                            </DataTable.Header>\r\n\r\n            {students.map((student) => {\r\n                return (\r\n                <DataTable.Row>\r\n                    <DataTable.Cell><TextInput placeholder='Type Here' onChangeText={(text) => { setFName(text) }} value={text}></TextInput>{student.fName}</DataTable.Cell>\r\n                    <DataTable.Cell><TextInput placeholder='Type Here' onChangeText={(text) => { setLName(text) }} value={text}></TextInput>{student.fName}</DataTable.Cell>\r\n                    <DataTable.Cell><TextInput placeholder='Type Here' onChangeText={(text) => { setDOB(text) }} value={text}></TextInput>{student.fName}</DataTable.Cell>\r\n                                \r\n                            </DataTable.Row>\r\n                );\r\n            })}\r\n            </DataTable>\r\n            <button title=\"Edit Studnet\" onPress={() => {\r\n\r\n            }} ></button>\r\n            </View>\r\n            \r\n        </View>\r\n    );\r\n}\r\n\r\n\r\n    export default EditStudent\r\n        \r\n       /* useEffect(() => {\r\n            const getStudents = async () => {\r\n                const data = await getDocs(usersCollectionRef);\r\n                //console.log(data);\r\n                setStudents(data.docs.map((doc)=> ({ ...doc.data(), id: doc.id }))); // now users are added to the db\r\n                console.log(\"doc.id=\"+doc.id)\r\n                // users are added, but not displayed before I push the refresh button (update is next)\r\n            }; \r\n            \r\n            getStudents();\r\n            } ,[]);\r\n*/\r\n            \r\n         \r\n        \r\n       \r\n\r\n   /* return (\r\n        <View>\r\n            <Text></Text>\r\n        </View>\r\n    );\r\n        \r\n            \r\n        \r\n        <View>\r\n            <TouchableOpacity\r\n                onPress={HomeScreenRedir}\r\n                style={styles.button}>\r\n                <Text styles={styles.buttonText}>Go Home</Text>\r\n            </TouchableOpacity>\r\n            <View>\r\n                        <DataTable>\r\n                            <DataTable.Header>\r\n                            <DataTable.Title>id</DataTable.Title>\r\n                            <DataTable.Title>fName</DataTable.Title>\r\n                            <DataTable.Title>lName</DataTable.Title>\r\n                            <DataTable.Title>DOB</DataTable.Title>\r\n                            </DataTable.Header>\r\n\r\n            {students.filter(student => student.fName == \"Helge\").map((student) => {\r\n            \r\n                 return (\r\n                    <DataTable.Row>\r\n                                    <DataTable.Cell>sdf</DataTable.Cell>\r\n                                    <DataTable.Cell>student.fName</DataTable.Cell>\r\n                                    <DataTable.Cell>student.lName</DataTable.Cell>\r\n                                    <DataTable.Cell>student.DOB</DataTable.Cell>\r\n                                </DataTable.Row>\r\n                    );\r\n                })}\r\n                </DataTable>\r\n                </View>\r\n                \r\n            </View>*/\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      justifyContent: 'center',\r\n      alignItems: 'center'\r\n    },\r\n    button: {\r\n      backgroundColor: '#0782F9',\r\n      width: '60%',\r\n      padding: 15,\r\n      borderRadius: 10,\r\n      alignItems: 'center',\r\n      marginTop: 40,\r\n    },\r\n    buttonOutline: {\r\n        backgroundColor: 'white',\r\n        marginTop: 5,\r\n        borderColor: '#0782F9',\r\n        borderWidth: 2,\r\n    },\r\n    buttonText: {\r\n        color: 'white',\r\n        fontWeight: '700',\r\n        fontSize: 16,\r\n    },\r\n  })"]},"metadata":{},"sourceType":"module"}