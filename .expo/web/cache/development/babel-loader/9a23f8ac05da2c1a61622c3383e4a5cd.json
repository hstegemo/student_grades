{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { deleteDoc, doc, getDoc, setDoc } from 'firebase/firestore';\nimport React, { useState } from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { db } from \"../firebaseConfig\";\nimport { jsonEval } from '@firebase/util';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar GradesScreen = function GradesScreen() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      userDoc = _useState2[0],\n      setUserDoc = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      text = _useState4[0],\n      setText = _useState4[1];\n\n  var Create = function Create() {\n    var myDoc = doc(db, \"MyCollection\", \"MyDocument\");\n    var docData = {\n      \"classId\": \"IKT205\",\n      \"fName\": \"Helge\",\n      \"lName\": \"Stegemoen\",\n      \"DOB\": \"05/19/1971\",\n      \"className\": \"Application Development\",\n      \"Score\": 98,\n      \"Grade\": \"F\"\n    };\n    setDoc(myDoc, docData).then(function () {\n      alert(\"document.created\");\n    }).catch(function (error) {\n      alert(error.message);\n    });\n  };\n\n  var Read = function Read() {\n    var myDoc = doc(db, \"MyCollection\", \"MyDocument\");\n    getDoc(myDoc).then(function (snapshot) {\n      if (snapshot.exists) {\n        setUserDoc(snapshot.data());\n      } else {\n        alert(\"No doc found\");\n      }\n    }).catch(function (error) {\n      alert(error.message);\n    });\n  };\n\n  var Update = function Update() {\n    var myDoc = doc(db, \"MyCollection\", \"MyDocument\");\n    setDoc(myDoc, value, {\n      merge: merge\n    }).then(function () {\n      alert(\"Updated successfully\");\n      setText(\"\");\n    }).catch(function (error) {\n      alert(error.message);\n    });\n  };\n\n  var Delete = function Delete() {\n    var myDoc = doc(db, \"MyCollection\", \"MyDocument\");\n    setDoc(myDoc, value, {\n      merge: merge\n    });\n    then(function () {\n      alert(\"Updated successfully\");\n      setText(\"\");\n    }).catch(function (error) {\n      return alert(error.messge);\n    });\n  };\n\n  return _jsxs(View, {\n    children: [_jsx(Button, {\n      title: \"Create new doc\",\n      onPress: Create\n    }), _jsx(Button, {\n      title: \"Read Doc\",\n      onPress: Read\n    }), userDoc != null && _jsxs(Text, {\n      children: [\"Bio: \", userDoc.bio]\n    }), _jsx(TextInput, {\n      style: {\n        width: '95%',\n        fontSize: 18,\n        padding: 12,\n        borderColor: 'gray',\n        borderWidth: 0.2,\n        borderRadius: 10,\n        marginVertical: 20\n      },\n      placeholder: \"Type Here\",\n      onChangeText: function onChangeText(text) {\n        setText(text);\n      },\n      value: text\n    }), _jsx(Button, {\n      title: \"Update Doc\",\n      onPress: function onPress() {\n        Update({\n          \"bio\": text\n        }, true);\n      },\n      disabled: text == \"\"\n    }), _jsx(Button, {\n      title: \"Delete Doc\",\n      onPress: Delete\n    })]\n  });\n};\n\nexport default GradesScreen;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/hsteg/VSCode/ReactNative/assignment2/screens/GradesScreen.js"],"names":["deleteDoc","doc","getDoc","setDoc","React","useState","useNavigation","createNativeStackNavigator","db","jsonEval","GradesScreen","userDoc","setUserDoc","text","setText","Create","myDoc","docData","then","alert","catch","error","message","Read","snapshot","exists","data","Update","value","merge","Delete","messge","bio","width","fontSize","padding","borderColor","borderWidth","borderRadius","marginVertical","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import { StyleSheet, Text, TextInput, View, Button } from 'react-native'\r\nimport { deleteDoc, doc, getDoc, setDoc } from 'firebase/firestore'\r\nimport React, { useState } from 'react'\r\nimport { useNavigation } from '@react-navigation/native'\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack'\r\nimport { db } from '../firebaseConfig';\r\nimport { jsonEval } from '@firebase/util'\r\n\r\nconst GradesScreen = () => {\r\n    // Storing student data\r\n    const [userDoc, setUserDoc] = useState(\"\");\r\n    // update text\r\n    const [text, setText] = useState(\"\");\r\n\r\n    // Crud functions\r\n    const Create = () => {\r\n        const myDoc = doc(db, \"MyCollection\", \"MyDocument\");\r\n        \r\n        // Your document goes here\r\n        const docData = {\r\n            \"classId\": \"IKT205\",\r\n            \"fName\": \"Helge\",\r\n            \"lName\": \"Stegemoen\",\r\n            \"DOB\": \"05/19/1971\",\r\n            \"className\": \"Application Development\",\r\n            \"Score\": 98,\r\n            \"Grade\": \"F\"\r\n        }\r\n        \r\n        setDoc(myDoc, docData)\r\n        // Handling promises\r\n        .then(() => {\r\n            alert(\"document.created\")\r\n        })\r\n        .catch((error) => {\r\n            alert(error.message);\r\n        })\r\n\r\n    }\r\n\r\n    const Read = () => {\r\n        const myDoc = doc(db, \"MyCollection\", \"MyDocument\");\r\n        \r\n        getDoc(myDoc)\r\n        // Handling promises\r\n        .then((snapshot) => {\r\n            if(snapshot.exists){\r\n                setUserDoc(snapshot.data())\r\n            } else {\r\n                alert(\"No doc found\");\r\n            }\r\n        })\r\n        .catch(error => {\r\n            alert(error.message);\r\n        })\r\n    }\r\n  \r\n    const Update = () => {\r\n        const myDoc = doc(db, \"MyCollection\", \"MyDocument\");\r\n\r\n        setDoc(myDoc, value, { merge: merge })\r\n            // Handling promises\r\n            .then(() => {\r\n                alert(\"Updated successfully\");\r\n                setText(\"\");\r\n            })\r\n            .catch(error => {\r\n                alert(error.message);\r\n            })\r\n    }\r\n\r\n    const Delete = () => {\r\n        const myDoc = doc(db, \"MyCollection\", \"MyDocument\");\r\n\r\n        setDoc(myDoc, value, {merge: merge})\r\n            // Handling promises\r\n            then(() => {\r\n                alert(\"Updated successfully\");\r\n                setText(\"\");\r\n            })\r\n            .catch(error => alert(error.messge)\r\n            )\r\n    }\r\n\r\n    return (\r\n    <View>\r\n      <Button title=\"Create new doc\" onPress={Create}></Button>\r\n      <Button title=\"Read Doc\" onPress={Read}></Button>\r\n      {\r\n          userDoc != null && \r\n          <Text>Bio: {userDoc.bio}</Text>\r\n      }\r\n      <TextInput\r\n        style={{\r\n            width: '95%',\r\n            fontSize: 18,\r\n            padding: 12,\r\n            borderColor: 'gray',\r\n            borderWidth: 0.2,\r\n            borderRadius: 10,\r\n            marginVertical: 20\r\n          }} placeholder=\"Type Here\" onChangeText={(text) => {setText(text) }} value={text}></TextInput>\r\n      <Button title=\"Update Doc\" onPress={() => {\r\n          Update({\r\n              \"bio\": text\r\n          }, true)\r\n      }} disabled={text == \"\"}></Button>\r\n      <Button title=\"Delete Doc\" onPress={Delete}></Button>\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default GradesScreen\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}